@page "/course/{CourseId}"
@inject DatabaseService DB;
@inject AuthenticationStateProvider Auth;
@using Microsoft.EntityFrameworkCore;
@using NCVC.App.Components;
@using NCVC.App.Models;
@using System.Web;
@inject AuthenticationStateProvider Auth;
@inject NotifierService Notifier;
@inject NCVC.App.Services.EnvironmentVariableService EV;
@implements IDisposable;

<AuthorizeView Roles="Staff">
    <Authorized>
        @if (Allowed)
        {
            <h2 class="ui header">
                <i class="list icon"></i>
                <div class="content">
                    @Course.Name
                </div>
            </h2>

            <div>
                <GetMailsComponent IsAll="false" Course="Course" />
            </div>

            <div class="ui basic segment">
                <div class="ui menu top attached">
                    @if (!ShowInfected)
                    {
                        <div data-tooltip="感染者データを表示"><a class="small item" @onclick='() => { ShowInfected = true; }'><i class="fas fa-virus"></i></a></div>

                    }
                    else
                    {
                        <div data-tooltip="非感染者データを表示"><a class="small item" @onclick='() => { ShowInfected = false; }'><i class="fas fa-virus-slash"></i></a></div>
                    }
                    <div class="right menu">
                        <div class="item" style="width: 50em">
                            <div class="ui transparent icon input">
                                <i class="filter link icon" @onclick="()=> { Filter(FilterString); }"></i>
                                <input type="text" placeholder="e.g. date<@DateTime.Now.Year/@DateTime.Now.Month/@DateTime.Now.Day order by ~date error" class="tt" @bind="FilterString" @onkeyup='(e) => { if (e.Key == "Enter") { Filter(FilterString); } }'>
                            </div>
                        </div>
                        <div data-tooltip="結果をダウンロード"><a class="ui item" target="_blank" href='@GetCsvFileUrl(FilterString)'><i class="download icon"></i></a></div>
                    </div>
                </div>

                
                <div class="ui menu attached">
                    <div data-tooltip="検索条件をリセット"><a class="active item" @onclick='() => { FilterString = ""; Filter(""); }'>リセット</a></div>
                    @foreach (var button in (Course.FilterButtons ?? "").Split(new[] { "\r\n", "\n", "\r" }, StringSplitOptions.None))
                    {
                        var xs = button.Split(":", 2);
                        if (xs.Count() >= 2)
                        {
                            <a class="item" @onclick='() => { SetFiltering(xs[1]); }'>@xs[0]</a>
                        }
                    }
                </div>

                <Paginated Collection="@HealthList" @ref="@Pagination" CssClass="attached" EntriesPerPage="100">
                    <table class="ui very compact table @(Pagination.HasPagination ? "" : "bottom") attached">
                        <thead>
                            <tr>
                                <th class="single line">
                                    <a href="javascript:void(0);" @onclick="SetOrderDescDate"><i class="angle up icon"></i></a>
                                    日付
                                    <a href="javascript:void(0);" @onclick="SetOrderDate"><i class="angle down icon"></i></a>
                                </th>
                                @if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("TIMEFRAME")))
                                {
                                    <th class="single line">
                                        <a href="javascript:void(0);" @onclick="SetOrderDescTimeFrame"><i class="angle up icon"></i></a>
                                        時間帯
                                        <a href="javascript:void(0);" @onclick="SetOrderTimeFrame"><i class="angle down icon"></i></a>
                                    </th>
                                }
                                <th colspan="2" class="single line">
                                    <a href="javascript:void(0);" @onclick="SetOrderDescStudent"><i class="angle up icon"></i></a>
                                    学生
                                    <a href="javascript:void(0);" @onclick="SetOrderStudent"><i class="angle down icon"></i></a>
                                </th>
                                @if (!ShowInfected)
                                {
                                    <th class="single line">体温</th>
                                    <th class="single line">せき</th>
                                    <th class="single line">息苦しさ</th>
                                    <th class="single line">鼻水</th>
                                    <th class="single line">のどの痛み</th>
                                    <th class="single line">体のだるさ</th>
                                    <th class="single line">下痢</th>
                                    <th class="single line">頭痛</th>
                                    <th class="single line">その他風邪症状</th>
                                    <th class="single line">その他症状詳細</th>
                                    <th class="single line">解熱剤・せき止め薬・かぜ薬等の服用</th>
                                    <th class="single line">検査実施</th>
                                    <th class="single line">検査結果</th>
                                }
                                else
                                {
                                    <th class="single line">記録時間1</th>
                                    <th class="single line">体温1</th>
                                    <th class="single line">酸素飽和度1</th>
                                    <th class="single line">記録時間2</th>
                                    <th class="single line">体温2</th>
                                    <th class="single line">酸素飽和度2</th>
                                    <th class="single line">せき</th>
                                    <th class="single line">息苦しさ</th>
                                    <th class="single line">体のだるさ</th>
                                    <th class="single line">吐き気</th>
                                    <th class="single line">下痢</th>
                                    <th class="single line">意識障害</th>
                                    <th class="single line">食事が食べられない</th>
                                    <th class="single line">尿が出ていない</th>
                                    <th class="single line">その他の症状</th>
                                    <th class="single line">具体の症状</th>
                                }
                                <th class="single line">提出日</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var health in Pagination.ShowedModels)
                            {
                                var style = "";
                                if (health.IsEmptyData)
                                {
                                    style = "active";
                                }
                                else
                                {
                                    if (!ShowInfected)
                                    {
                                        if (health.HasWrongValue() || health.IsInfected)
                                        {
                                            style = "negative";
                                        }
                                        else if (health.HasWarnValue())
                                        {
                                            style = "warning";
                                        }
                                    }
                                }
                                <tr class="@style">
                                    <td><a href="javascript:void(0);" @onclick="() => { SetDate(health.MeasuredAt); }">@health.MeasuredAt.ToShortDateString()</a></td>
                                    @if (!string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("TIMEFRAME")))
                                    {
                                        <td><a href="javascript:void(0);" @onclick="() => { SetTimeFrame(health.TimeFrame); }">@health.TimeFrame</a></td>
                                    }
                                    <td><a href="javascript:void(0);" @onclick="() => { SetStudent(health.Student); }">@health.Student.Account</a></td>
                                    <td>@health.Student.Name</td>

                                    @if (health.IsEmptyData)
                                    {
                                        if (!ShowInfected)
                                        {
                                            <td colspan="14">
                                                未提出
                                            </td>
                                        }
                                        else
                                        {
                                            <td colspan="17">
                                                未提出
                                            </td>
                                        }
                                    }
                                    else
                                    {
                                        if (!ShowInfected)
                                        {
                                            if (health.IsInfected)
                                            {
                                                <td colspan="13">
                                                    <i class="attention icon"></i>感染中
                                                </td>
                                                <td>@health.UploadedAt.ToString()</td>
                                            }
                                            else
                                            {
                                                <td>
                                                    @if (health.IsWrongBodyTemperature())
                                                    {<i class="attention icon"></i> }
                                                    else if (health.IsWarnBodyTemperature())
                                                    { <i class="exclamation triangle icon"></i>}
                                                    @health.BodyTemperature
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn1())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn1
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn2())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn2
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn3())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn3
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn4())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn4
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn5())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn5
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn6())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn6
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn7())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn7
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn8())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn8
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn9())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn9
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn10())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn10
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn11())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn11
                                                </td>
                                                <td>
                                                    @if (health.IsWrongStringColumn12())
                                                    {<i class="attention icon"></i>}
                                                    @health.StringColumn12
                                                </td>
                                                <td>@health.UploadedAt.ToString()</td>
                                            }
                                        }
                                        else
                                        {
                                            if (!health.IsInfected)
                                            {
                                                <td colspan="16">
                                                    非感染
                                                </td>
                                                <td>@health.UploadedAt.ToString()</td>
                                            }
                                            else
                                            {
                                                <td>@health.InfectedMeasuredTime1</td>
                                                <td>@health.InfectedBodyTemperature1</td>
                                                <td>@(health.InfectedOxygenSaturation1 < 0 ? "" : health.InfectedOxygenSaturation1.ToString())</td>
                                                <td>@health.InfectedMeasuredTime2</td>
                                                <td>@health.InfectedBodyTemperature2</td>
                                                <td>@(health.InfectedOxygenSaturation2 < 0 ? "" : health.InfectedOxygenSaturation2.ToString())</td>
                                                <td>@health.InfectedStringColumn1</td>
                                                <td>@health.InfectedStringColumn2</td>
                                                <td>@health.InfectedStringColumn3</td>
                                                <td>@health.InfectedStringColumn4</td>
                                                <td>@health.InfectedStringColumn5</td>
                                                <td>@health.InfectedStringColumn6</td>
                                                <td>@health.InfectedStringColumn7</td>
                                                <td>@health.InfectedStringColumn8</td>
                                                <td>@health.InfectedStringColumn9</td>
                                                <td>@health.InfectedStringColumn10</td>
                                                <td>@health.UploadedAt.ToString()</td>
                                            }
                                        }
                                    }

                                </tr>
                            }
                        </tbody>
                    </table>
                </Paginated>
            </div>

            <AuthorizeView Roles="Admin" Context="adminContext">
                <GetMailsComponent IsAll="true" Course="Course" />
            </AuthorizeView>


            <div class="ui basic segment">
                <div class="ui menu top attached">
                    @if (EV.IsShowUnsubmittedUsers())
                    {
                        <span class="item">未登録の観察対象者</span>
                    }
                    else
                    {
                        <span class="item">未提出の観察対象者 (@(ussDate.ToShortDateString()))</span>
                        <a class="item" @onclick='() => { ussDate = DateTime.Today; }'>今日</a>
                        <a class="item" @onclick='() => { ussDate = ussDate.AddDays(-1); }'>現在表示日時の前日</a>
                        <a class="item" @onclick='() => { ussDate = ussDate.AddDays(1); }'>現在表示日時の翌日</a>
                    }
                </div>
                <table class="ui very compact table bottom attached">
                    <thead>
                        <tr>
                            <th colspan="2" class="single line">
                                観察対象者
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!EV.IsShowUnsubmittedUsers())
                        {
                            @foreach (var s in Health.UnsubmittedStudents(DB.Context, id, ussDate))
                            {
                                <tr>
                                    <td><a href="javascript:void(0);" @onclick="() => { SetStudent(s); }">@s.Account</a></td>
                                    <td>@s.Name</td>
                                </tr>
                            }
                        }
                        @foreach (var a in Health.UnregisteredAccounts(DB.Context, id))
                        {
                            <tr>
                                <td>@a</td>
                                <td>未登録</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </Authorized>
</AuthorizeView>



@code
{
    [Parameter]
    public string CourseId { get; set; }
    protected int id { get; set; }

    protected bool ShowInfected = false;

    protected DateTime ussDate { get; set; } = DateTime.Today;

    protected Paginated<Health> Pagination;

    protected Course Course { get; set; }
    protected IEnumerable<Health> HealthList { get; set; }
    protected string FilterString = "";
    protected bool Loaded = false;
    protected bool Allowed = false;
    protected override async Task OnInitializedAsync()
    {
        Loaded = false;
        Notifier.Notify += OnNotify;
        await Update();

    }

    public async Task OnNotify()
    {
        await Update();
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        Notifier.Notify -= OnNotify;
    }


    protected async Task Update()
    {
        id = int.Parse(CourseId);
        var auth = await Auth.GetAuthenticationStateAsync();

        var staff = DB.Context.Staffs.Where(x => x.Account == auth.User.Identity.Name).FirstOrDefault();
        if (staff != null)
        {
            var isTestMode = !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("TEST_MODE"));
            Course = DB.Context.Courses.AsNoTracking().ToArray().Where(x => x.Id == id && (isTestMode || staff.IsAdmin || x.AssignedStaffAccounts().Contains(auth.User.Identity.Name))).FirstOrDefault();
            if (Course != null)
            {
                Allowed = true;

                var today = DateTime.Today;
                var condition = $"date==today";
                var order = "user";
                SetConditionAndOrder(condition, order);
                HealthList = Health.Search(DB.Context, EV, id, FilterString);
                //HealthList = DB.Context.HealthList.Include(x => x.Student).Where(x => x.CourseId == id).OrderBy(x => x.MeasuredAt);
            }
        }
    }

    protected string GetCsvFileUrl(string filterString)
    {
        string str = HttpUtility.UrlEncode(filterString);
        @if(!ShowInfected)
        {
            return $"course/{Course.Id}/report.csv?filterString={str}";
        }
        else
        {
            return $"course/{Course.Id}/report-infected.csv?filterString={str}";
        }
    }

    protected (string, string) GetConditionAndOrder()
    {
        string condition = "", order = "";
        if (FilterString.Contains("order by"))
        {
            var str = FilterString.Split("order by");
            if (str.Count() == 2)
            {
                order = str[0];
            }
            if (str.Count() >= 2)
            {
                condition = str[0];
                order = str[1];
            }
        }
        else
        {
            condition = FilterString;
        }
        return (condition, order);
    }
    protected void SetConditionAndOrder(string condition, string order)
    {
        if (string.IsNullOrWhiteSpace(order))
        {
            FilterString = $"{condition.Trim()}";
        }
        else
        {
            FilterString = $"{condition.Trim()} order by {order.Trim()}";
        }
    }

    protected string AddCondition(string condition)
    {
        var newQuery = NCVC.Parser.QueryParser.ParseQuery(condition);
        if (newQuery?.Value == null)
        {
            return "";
        }
        var (oldConditionString, _) = GetConditionAndOrder();
        var oldConditionExprs = oldConditionString.Split(",", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x));
        var newRefs = newQuery.Value.Item1.SelectMany(x => NCVC.Parser.QueryParser.GetReferences(x));
        var cs = oldConditionExprs.Where(cndt =>
        {
            var query = NCVC.Parser.QueryParser.ParseQuery(cndt);
            if (query?.Value == null) return false;
            var refs = query.Value.Item1.SelectMany(x => NCVC.Parser.QueryParser.GetReferences(x));
            return refs.Intersect(newRefs).Count() == 0;
        }).Append(condition);
        return string.Join(",", cs);
    }

    protected void SetOrderStudent()
    {
        var (condition, order) = GetConditionAndOrder();
        var orders = order.Split(",", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x)).Where(x => !x.Contains("user")).Prepend("user");
        order = string.Join(", ", orders);
        SetConditionAndOrder(condition, order);
        Filter(FilterString);
    }
    protected void SetOrderDescStudent()
    {
        var (condition, order) = GetConditionAndOrder();
        var orders = order.Split(",", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x)).Where(x => !x.Contains("user")).Prepend("~user");
        order = string.Join(", ", orders);
        SetConditionAndOrder(condition, order);
        Filter(FilterString);
    }

    protected void SetOrderTimeFrame()
    {
        var (condition, order) = GetConditionAndOrder();
        var orders = order.Split(",", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x)).Where(x => !x.Contains("timeframe")).Prepend("timeframe");
        order = string.Join(", ", orders);
        SetConditionAndOrder(condition, order);
        Filter(FilterString);
    }
    protected void SetOrderDescTimeFrame()
    {
        var (condition, order) = GetConditionAndOrder();
        var orders = order.Split(",", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x)).Where(x => !x.Contains("timeframe")).Prepend("~timeframe");
        order = string.Join(", ", orders);
        SetConditionAndOrder(condition, order);
        Filter(FilterString);
    }

    protected void SetOrderDate()
    {
        var (condition, order) = GetConditionAndOrder();
        var orders = order.Split(",", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x)).Where(x => !x.Contains("date")).Prepend("date");
        order = string.Join(", ", orders);
        SetConditionAndOrder(condition, order);
        Filter(FilterString);
    }
    protected void SetOrderDescDate()
    {
        var (condition, order) = GetConditionAndOrder();
        var orders = order.Split(",", StringSplitOptions.RemoveEmptyEntries).Select(x => x.Trim()).Where(x => !string.IsNullOrWhiteSpace(x)).Where(x => !x.Contains("date")).Prepend("~date");
        order = string.Join(", ", orders);
        SetConditionAndOrder(condition, order);
        Filter(FilterString);
    }


    protected void SetFiltering(string expr)
    {
        var (_, order) = GetConditionAndOrder();
        SetConditionAndOrder(AddCondition(expr), order);
        Filter(FilterString);
    }

    protected void SetStudent(Student student)
    {
        var (_, order) = GetConditionAndOrder();
        var expr = $"user == \"{student?.Account}\"";
        SetConditionAndOrder(AddCondition(expr), order);
        Filter(FilterString);
    }
    protected void SetTimeFrame(string timeFrame)
    {
        var (_, order) = GetConditionAndOrder();
        var expr = $"timeframe == \"{timeFrame}\"";
        SetConditionAndOrder(AddCondition(expr), order);
        Filter(FilterString);
    }
    protected void SetDate(DateTime date)
    {
        var (_, order) = GetConditionAndOrder();
        var expr = $"date =={ date.Year}/{date.Month}/{date.Day}";
        SetConditionAndOrder(AddCondition(expr), order);
        Filter(FilterString);
    }

    protected void Filter(string filterString)
    {
        HealthList = Health.Search(DB.Context, EV, Course.Id, filterString);
    }

}
