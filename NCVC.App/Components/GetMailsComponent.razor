@using NCVC.App.Models;
@using Microsoft.Extensions.Configuration;
@using Microsoft.EntityFrameworkCore;
@inject IJSRuntime JS;
@inject DatabaseService DB;
@inject NotifierService Notifier;
@inject IConfiguration Config;
@inject AuthenticationStateProvider Auth;
@inject EnvironmentVariableService EV;
@inject CsvService CSV;



<a class="@CssClass" @onclick="UpdateAsync">
    @if (Processing)
    {
        <i class="icons">
            <i class="notched circle loading icon"></i>
        </i>
    }
    else
    {
        @if (IsAll)
        {
            <i class="icons">
                <i class="sync alternate icon"></i>
                <i class="inverted corner add icon"></i>
            </i>
        }
        else
        {
            <i class="icons">
                <i class="sync alternate icon"></i>
            </i>
        }
    }
</a>


@code{
    [Parameter]
    public string CssClass { get; set; }

    [Parameter]
    public bool IsAll { get; set; }

    [Parameter]
    public Course Course { get; set; }

    protected bool Processing { get; set; }

    public string MailMessage { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected async Task UpdateAsync()
    {
        if (!Processing)
        {
            Processing = true;
            await InvokeAsync(() => { StateHasChanged(); });
            await Task.Run(async () =>
            {
                var auth = await Auth.GetAuthenticationStateAsync();
                var staff = DB.Context.Staffs.Where(x => x.Account == auth.User.Identity.Name).FirstOrDefault();
                if (staff == null)
                {
                    return;
                }

                try
                {
                    int index, count, numOfNewData, numOfUpdated;
                    if (IsAll)
                    {
                        (index, count, numOfNewData, numOfUpdated) = await CSV.PullCsv(staff, Course);
                    }
                    else
                    {
                        var lastHistroy = DB.Context.Histories.Include(x => x.Operator).ToArray().Where(x => x.CourseId == Course.Id).OrderBy(x => x.OperatedAt).LastOrDefault();
                        if (lastHistroy == null)
                        {
                            (index, count, numOfNewData, numOfUpdated) = await CSV.PullCsv(staff, Course);
                        }
                        else
                        {
                            (index, count, numOfNewData, numOfUpdated) = await CSV.PullCsv(staff, Course, lastHistroy.LastIndex);
                        }
                    }
                    if (count == 0)
                    {
                        MailMessage = "新着メールはありません．";
                    }
                    else
                    {
                        MailMessage = $"{numOfNewData} 件の新規データと {numOfUpdated} 件の更新データを受け取りました．";
                    }
                }
                catch (Exception e)
                {
                    MailMessage = e.Message;
                }
            });
            Processing = false;
            await Notifier.Update();
        }
    }
}