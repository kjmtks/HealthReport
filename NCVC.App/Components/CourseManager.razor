@using NCVC.App.Models;
@using Microsoft.Extensions.Configuration;
@using Microsoft.EntityFrameworkCore;
@inject AuthenticationStateProvider Auth;
@inject IJSRuntime JS;
@inject DatabaseService DB;
@inject IConfiguration Config;
@inject NotifierService Notifier;
@inject EnvironmentVariableService EV;
@implements IDisposable;


<div class="@CssClass">
    <h2 class="ui header">
        <i class="list icon"></i>
        グループ
    </h2>
    <ErrorMessageComponent Subject="@ErrorSubject" ErrorMessage="@ErrorMessage" />

    <div class="ui basic segment">
        <div class="ui @(Processing ? "active" : "disabled") inverted dimmer">
            <div class="ui text loader">Please wait...</div>
        </div>
        @if (IsAdmin)
        {
            <div class="ui menu top attached">
                <a class="right item" @onclick="() => OpenCreate()"><i class="plus icon"></i></a>
            </div>
        }
        <Paginated Collection="@Collection" @ref="@Pagination" CssClass="attached">
            <table class="ui padded table @(Pagination.HasPagination ? "" : "bottom") attached">
                <thead>
                    <tr>
                        <th class="single line">名前</th>
                        <th class="single line">受付メールボックス名</th>
                        <th class="single line">受付メールアドレス</th>
                        <th class="single line">観察対象者数</th>
                        @if (IsAdmin)
                        {
                            <th class="single line"></th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var model in Pagination.ShowedModels)
                    {
                        <tr>
                            <td><a href="course/@model.Id">@model.Name</a></td>
                            <td>@model?.MailBox?.Name</td>
                            <td>@model?.MailBox?.EmailAddress</td>
                            <td>@model.StudentAssignments.Count()</td>
                            @if (IsAdmin)
                            {
                                <td class="right aligned">
                                    <a class="ui blue icon button" @onclick="() => OpenEdit(model)"><i class="edit icon"></i></a>
                                    <a class="ui red icon button" @onclick="() => RemoveAsync(model)"><i class="trash icon"></i></a>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </Paginated>
    </div>



    <div class="ui modal" id="edit-form-@ComponentId">
        <div class="header">@(Mode == EditMode.CreateNew ? "新規作成" : "編集")</div>
        <div class="content">

            <EditForm EditContext="@EditContext" OnSubmit="@Submit">
                <DataAnnotationsValidator />
                <div class="ui form">
                    <div class="field">
                        <label>名前</label>
                        <InputText @bind-Value="@EdittingModel.Name" />
                        <ValidationMessage For="@(() => EdittingModel.Name)" />
                    </div>
                    <div class="field">
                        <label>収集開始年月日</label>
                        <InputDate @bind-Value="@EdittingModel.StartDate" />
                        <ValidationMessage For="@(() => EdittingModel.StartDate)" />
                    </div>
                    <div class="field">
                        <label>検索期間（当日からの日数）</label>
                        <InputNumber @bind-Value="@EdittingModel.NumOfDaysToSearch" />
                        <ValidationMessage For="@(() => EdittingModel.NumOfDaysToSearch)" />
                    </div>
                    <div class="field">
                        <label>メールボックス</label>
                        <select class="ui fluid dropdown" @bind="mailBoxId">
                            @foreach (var mb in DB.Context.MailBoxes)
                            {
                                @if (mailBoxId == mb.Id)
                                {
                                    <option value="@mb.Id" selected>@mb.Name (@mb.EmailAddress)</option>
                                }
                                else
                                {
                                    <option value="@mb.Id">@mb.Name (@mb.EmailAddress)</option>
                                }
                            }
                        </select>
                        <ValidationMessage For="@(() => EdittingModel.MailBoxId)" />
                    </div>
                    <div class="field">
                        <label>スタッフリスト</label>
                        このコースに所属させるスタッフのアカウントを半角スペースまたは改行区切りで記述してください.
                        <InputTextArea @bind-Value="@EdittingModel.StaffAccounts" />
                        <ValidationMessage For="@(() => EdittingModel.StaffAccounts)" />
                    </div>
                    <div class="field">
                        <label>所属観察対象者リスト</label>
                        このグループに所属させる観察対象者のアカウントを半角スペースまたは改行区切りで記述してください.
                        <InputTextArea @bind-Value="@EdittingModel.StudentAccounts" />
                        <ValidationMessage For="@(() => EdittingModel.StudentAccounts)" />
                    </div>
                    <div class="field">
                        <label>初期フィルタ</label>
                        <InputText @bind-Value="@EdittingModel.InitialFilter" />
                        <ValidationMessage For="@(() => EdittingModel.InitialFilter)" />
                    </div>
                    <div class="field">
                        <label>フィルタボタン</label>
                        <InputTextArea @bind-Value="@EdittingModel.FilterButtons" />
                        <ValidationMessage For="@(() => EdittingModel.FilterButtons)" />
                    </div>
                    <div class="field">
                        <label>感染者情報を扱う</label>
                        <InputCheckbox @bind-Value="@EdittingModel.ShowInfectedData" />
                        <ValidationMessage For="@(() => EdittingModel.ShowInfectedData)" />
                    </div>
                    <div class="content">
                        <div class="actions">
                            <div class="ui red cancel inverted button"><i class="remove icon"></i>Cancel</div>
                            <button type="submit" class="ui green inverted button"><i class="checkmark icon"></i>OK</button>
                        </div>
                    </div>
                </div>
            </EditForm>

        </div>
    </div>



</div>

@code{
    [Parameter]
    public string CssClass { get; set; }

    public IEnumerable<Course> Collection { get; set; } = new Course[] { };

    protected int ComponentId;
    protected bool Processing { get; set; }
    protected string ErrorMessage { get; set; }
    protected string ErrorSubject { get; set; }
    protected int mailBoxId;

    protected Paginated<Course> Pagination;

    [Parameter]
    public bool IsAdmin { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Notifier.Notify += OnNotify;
        await Update();
    }
    protected async Task Update()
    {
        var auth = await Auth.GetAuthenticationStateAsync();
        var isTestMode = !string.IsNullOrWhiteSpace(Environment.GetEnvironmentVariable("TEST_MODE"));
        Collection = DB.Context.Courses.Include(x => x.StudentAssignments).ThenInclude(x => x.Student).OrderBy(x => x.Name).ToArray().Where(x => IsAdmin || isTestMode || x.AssignedStaffAccounts().Contains(auth.User.Identity.Name)) ?? new Course[] { };
    }
    public async Task OnNotify()
    {
        await Update();
        await InvokeAsync(StateHasChanged);
    }
    public void Dispose()
    {
        Notifier.Notify -= OnNotify;
    }



    protected Course EdittingModel { get; set; } = new Course();
    private ValidationMessageStore messageStore;
    protected EditContext EditContext { get; set; }
    protected EditMode Mode { get; set; } = EditMode.CreateNew;
    protected Course BeforeModel = null;
    protected enum EditMode { CreateNew, Edit }


    public CourseManager()
    {
        ComponentId = new Random().Next();
        ResetEdittingModel();
    }
    protected async Task OpenCreate()
    {
        EdittingModel = new Course();
        var sb = new System.Text.StringBuilder();
        sb.AppendLine(@"異常あり: error
体温37.0℃以上: temp >= 37.0
体温37.5℃以上: temp >= 37.5
直近4日: date > today - 4 && date <= today
昨日: date == today - 1
今日: date == today
先週: date >= thisweek - 7 && date < thisweek
今週: date >= thisweek && date < thisweek + 7
先月: date >= thismonth - 1 && date < thismonth
今月: date >= thismonth && date < thismonth + 1
要注目: tag -> ""要注目""
未提出: !submitted
提出済: submitted");
        EdittingModel.FilterButtons = sb.ToString();

        Mode = EditMode.CreateNew;
        ResetEdittingModel();
        await OpenEditDialog();
    }
    protected async Task OpenEdit(Course beforeModel)
    {
        BeforeModel = beforeModel;
        EdittingModel = beforeModel.GetEntityForEditOrRemove(DB.Context, Config);
        EdittingModel.StudentAccounts = string.Join(" ", EdittingModel.StudentAssignments.Select(x => x.Student.Account));
        if (EdittingModel == null)
        {
            ErrorSubject = "Error";
            ErrorMessage = "Not found the entity";
            return;
        }
        mailBoxId = EdittingModel.MailBoxId;
        Mode = EditMode.Edit;
        ResetEdittingModel(EdittingModel);
        await OpenEditDialog();
    }
    protected async Task RemoveAsync(Course model)
    {
        if (model == null) { return; }
        if(!await JS.InvokeAsync<bool>("confirmDialog", new[] { "削除してもよろしいですか？" }))
        {
            return;
        }
        var m = model.GetEntityForEditOrRemove(DB.Context, Config);
        if (m == null)
        {
            ErrorSubject = "Error";
            ErrorMessage = "Not found the entity";
            return;
        }
        try
        {
            m.Remove(DB.Context, Config);
        }
        catch (Exception e)
        {
            ErrorSubject = e.Message;
            ErrorMessage = e.StackTrace;
        }
        DB.Context.SaveChanges();

        await InvokeAsync(() => StateHasChanged());
        await InvokeAsync(() => Notifier.Update());
    }
    protected virtual async Task OnValidAsync(EditContext editContext)
    {
        Processing = true;
        await InvokeAsync(() => StateHasChanged());
        await CloseEditDialog();
        try
        {
            if (Mode == EditMode.CreateNew)
            {
                try
                {
                    EdittingModel.MailBoxId = mailBoxId;
                    EdittingModel.CreateNew(DB.Context, Config);
                }
                catch (Exception e)
                {
                    ErrorSubject = e.Message;
                    ErrorMessage = e.StackTrace;
                }
                DB.Context.SaveChanges();
            }
            if (Mode == EditMode.Edit)
            {
                var previous = EdittingModel.GetEntityAsNoTracking(DB.Context, Config);
                try
                {
                    EdittingModel.MailBoxId = mailBoxId;
                    EdittingModel.Update(DB.Context, Config, previous);
                }
                catch (Exception e)
                {
                    ErrorSubject = e.Message;
                    ErrorMessage = e.StackTrace;
                }
                DB.Context.SaveChanges();
            }
            await InvokeAsync(() => StateHasChanged());
            await InvokeAsync(() => Notifier.Update());
            Processing = false;
        }
        catch (Exception e)
        {
            ErrorMessage = e.Message;
            Processing = false;
            Console.Error.WriteLine(e);
            await CloseEditDialog();
            return;
        }
    }
    protected void AddValidationError(string fieldName, string errorMessage)
    {
        messageStore.Add(EditContext.Field(fieldName), errorMessage);
        EditContext.NotifyValidationStateChanged();
    }
    protected async Task Submit()
    {
        var v1 = EditContext.Validate();
        var v2 = Mode == EditMode.CreateNew
            ? EdittingModel.ServerSideValidationOnCreate(DB.Context, Config, AddValidationError)
            : EdittingModel.ServerSideValidationOnUpdate(DB.Context, Config, AddValidationError);
        if (v1 && v2)
        {
            await OnValidAsync(EditContext);
        }
    }

    private void ResetEdittingModel(Course model = null)
    {
        EditContext = new EditContext(EdittingModel);
        messageStore = new ValidationMessageStore(EditContext);
        EditContext.OnValidationRequested += (s, e) => messageStore.Clear();
        EditContext.OnFieldChanged += (s, e) => messageStore.Clear(e.FieldIdentifier);
        ErrorMessage = null;
    }

    public async Task CloseEditDialog() => await JS.InvokeVoidAsync("modalControl", $".ui.modal#edit-form-{ComponentId}", "hide");
    public async Task OpenEditDialog() => await JS.InvokeVoidAsync("modalControl", $".ui.modal#edit-form-{ComponentId}", "show");




}